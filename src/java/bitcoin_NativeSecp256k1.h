/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include "include/secp256k1.h"
/* Header for class bitcoin_NativeSecp256k1 */

#ifndef _Included_bitcoin_NativeSecp256k1
#define _Included_bitcoin_NativeSecp256k1
#ifdef __cplusplus
extern "C" {
#endif

JNIEXPORT jbyteArray JNICALL Java_bitcoin_NativeSecp256k1_sign_1message_1first(JNIEnv *, jclass, jobject, jobject, jbyteArray, jbyteArray, jobject, jobject, jlong);
JNIEXPORT void JNICALL Java_bitcoin_NativeSecp256k1_sign_1message_1second(JNIEnv *, jclass, jintArray, jobject, jobjectArray, jbyteArray, jobject, jobject, jint, jlong);
JNIEXPORT jbyteArray JNICALL Java_bitcoin_NativeSecp256k1_sign_1message_1third(JNIEnv *, jclass, jbyteArray, jobjectArray, jobject, jlong);

JNIEXPORT jboolean JNICALL Java_bitcoin_NativeSecp256k1_verify_1vss_1sign(JNIEnv *, jclass, jbyteArray, jobject, jbyteArray, jlong);
JNIEXPORT jboolean JNICALL Java_bitcoin_NativeSecp256k1_verify_1frost(JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jlong);

JNIEXPORT void JNICALL Java_bitcoin_NativeSecp256k1_send_1vss_1sign(JNIEnv *, jclass, jobject, jobjectArray, jobject, jobject, jint, jlong);

JNIEXPORT void JNICALL Java_bitcoin_NativeSecp256k1_receive_1vss_1sign(JNIEnv *, jclass, jobject, jobject, jobject, jlong);

JNIEXPORT jobjectArray JNICALL Java_bitcoin_NativeSecp256k1_aggregate_1vss_1sign(JNIEnv *, jclass, jobjectArray, jobject, jlong);

JNIEXPORT jobjectArray JNICALL Java_bitcoin_NativeSecp256k1_send_1shares(JNIEnv *, jclass, jobjectArray, jobject, jobject, jlong);

JNIEXPORT void JNICALL Java_bitcoin_NativeSecp256k1_generate_1key(JNIEnv *, jclass, jobject, jobject, jlong);
/*
 * Class:     bitcoin_NativeSecp256k1
 * Method:    receive_commitments
 * Signature: ([[B[[[BIJ)v
 */
JNIEXPORT void JNICALL Java_bitcoin_NativeSecp256k1_receive_1commitments
(JNIEnv *, jclass, jobjectArray, jobject, jobjectArray, jint, jlong);
/*
* Class:     bitcoin_NativeSecp256k1
* Method:    create_commitments
* Signature: ([[B[BJ)[B
*/
JNIEXPORT jobjectArray JNICALL Java_bitcoin_NativeSecp256k1_create_1commitments
        (JNIEnv *, jclass, jobjectArray, jbyteArray, jlong);

/*
 * Class:     bitcoin_NativeSecp256k1
 * Method:    secp256k1_ctx_clone
 * Signature: (J)J
 */
SECP256K1_API jlong JNICALL Java_bitcoin_NativeSecp256k1_secp256k1_1ctx_1clone
        (JNIEnv *, jclass, jlong);

/*
 * Class:     bitcoin_NativeSecp256k1
 * Method:    secp256k1_context_randomize
 * Signature: (Ljava/nio/ByteBuffer;J)I
 */
SECP256K1_API jint JNICALL Java_bitcoin_NativeSecp256k1_secp256k1_1context_1randomize
        (JNIEnv *, jclass, jobject, jlong);

/*
 * Class:     bitcoin_NativeSecp256k1
 * Method:    secp256k1_privkey_tweak_add
 * Signature: (Ljava/nio/ByteBuffer;J)[[B
 */
SECP256K1_API jobjectArray JNICALL Java_bitcoin_NativeSecp256k1_secp256k1_1privkey_1tweak_1add
        (JNIEnv *, jclass, jobject, jlong);

/*
 * Class:     bitcoin_NativeSecp256k1
 * Method:    secp256k1_privkey_tweak_mul
 * Signature: (Ljava/nio/ByteBuffer;J)[[B
 */
SECP256K1_API jobjectArray JNICALL Java_bitcoin_NativeSecp256k1_secp256k1_1privkey_1tweak_1mul
        (JNIEnv *, jclass, jobject, jlong);

/*
 * Class:     bitcoin_NativeSecp256k1
 * Method:    secp256k1_pubkey_tweak_add
 * Signature: (Ljava/nio/ByteBuffer;JI)[[B
 */
SECP256K1_API jobjectArray JNICALL Java_bitcoin_NativeSecp256k1_secp256k1_1pubkey_1tweak_1add
        (JNIEnv *, jclass, jobject, jlong, jint);

/*
 * Class:     bitcoin_NativeSecp256k1
 * Method:    secp256k1_pubkey_tweak_mul
 * Signature: (Ljava/nio/ByteBuffer;JI)[[B
 */
SECP256K1_API jobjectArray JNICALL Java_bitcoin_NativeSecp256k1_secp256k1_1pubkey_1tweak_1mul
        (JNIEnv *, jclass, jobject, jlong, jint);

/*
 * Class:     bitcoin_NativeSecp256k1
 * Method:    secp256k1_destroy_context
 * Signature: (J)V
 */
SECP256K1_API void JNICALL Java_bitcoin_NativeSecp256k1_secp256k1_1destroy_1context
(JNIEnv *, jclass, jlong);

/*
 * Class:     bitcoin_NativeSecp256k1
 * Method:    secp256k1_ecdsa_verify
 * Signature: (Ljava/nio/ByteBuffer;JII)I
 */
SECP256K1_API jint JNICALL Java_bitcoin_NativeSecp256k1_secp256k1_1ecdsa_1verify
        (JNIEnv *, jclass, jobject, jlong, jint, jint);

/*
 * Class:     bitcoin_NativeSecp256k1
 * Method:    secp256k1_ecdsa_sign
 * Signature: (Ljava/nio/ByteBuffer;J)[[B
 */
SECP256K1_API jobjectArray JNICALL Java_bitcoin_NativeSecp256k1_secp256k1_1ecdsa_1sign
        (JNIEnv *, jclass, jobject, jlong);

/*
 * Class:     bitcoin_NativeSecp256k1
 * Method:    secp256k1_ec_seckey_verify
 * Signature: (Ljava/nio/ByteBuffer;J)I
 */
SECP256K1_API jint JNICALL Java_bitcoin_NativeSecp256k1_secp256k1_1ec_1seckey_1verify
        (JNIEnv *, jclass, jobject, jlong);

/*
 * Class:     bitcoin_NativeSecp256k1
 * Method:    secp256k1_ec_pubkey_create
 * Signature: (Ljava/nio/ByteBuffer;J)[[B
 */
SECP256K1_API jobjectArray JNICALL Java_bitcoin_NativeSecp256k1_secp256k1_1ec_1pubkey_1create
        (JNIEnv *, jclass, jobject, jlong);

/*
 * Class:     bitcoin_NativeSecp256k1
 * Method:    secp256k1_ec_pubkey_parse
 * Signature: (Ljava/nio/ByteBuffer;JI)[[B
 */
SECP256K1_API jobjectArray JNICALL Java_bitcoin_NativeSecp256k1_secp256k1_1ec_1pubkey_1parse
        (JNIEnv *, jclass, jobject, jlong, jint);

/*
 * Class:     bitcoin_NativeSecp256k1
 * Method:    secp256k1_ecdh
 * Signature: (Ljava/nio/ByteBuffer;JI)[[B
 */
SECP256K1_API jobjectArray JNICALL Java_bitcoin_NativeSecp256k1_secp256k1_1ecdh
        (JNIEnv* env, jclass classObject, jobject byteBufferObject, jlong ctx_l, jint publen);



/*
 * Class:     bitcoin_NativeSecp256k1
 * Method:    secp256k1_frost_sign
 * Signature: (Ljava/nio/ByteBuffer;J)[[B
 */
JNIEXPORT jobjectArray JNICALL Java_bitcoin_NativeSecp256k1_secp256k1_1frost_1sign
        (JNIEnv *, jclass, jobject, jlong);

/*
 * Class:     bitcoin_NativeSecp256k1
 * Method:    secp256k1_frost_verify
 * Signature: (Ljava/nio/ByteBuffer;J)[[B
 */
JNIEXPORT jobjectArray JNICALL Java_bitcoin_NativeSecp256k1_secp256k1_1frost_1verify
        (JNIEnv *, jclass, jobject, jlong);

#ifdef __cplusplus
}
#endif
#endif
